"use client";

import * as bahData from "@/utils/bahData";

function getBahFromData(grade: string, depStatus: "with"|"without", city: string): number {
  try {
    // Prefer function-style exports if present
    // 1) getBahMonthly({grade, depStatus, city})
    // 2) getBAH(grade, depStatus, city)
    // 3) Table-like export: BAH_TABLE / table / default { [grade]: { with|without: { [city]: number } } }
    // Fallbacks always resolve to 0 if nothing matches.
    // @ts-ignore
    if (typeof (bahData as any).getBahMonthly === "function") {
      // @ts-ignore
      const v = (bahData as any).getBahMonthly({ grade, depStatus, city });
      return Number(v) || 0;
    }
    // @ts-ignore
    if (typeof (bahData as any).getBAH === "function") {
      // @ts-ignore
      const v = (bahData as any).getBAH(grade, depStatus, city);
      return Number(v) || 0;
    }
    // @ts-ignore
    const T = (bahData as any).BAH_TABLE || (bahData as any).table || (bahData as any).default;
    if (T && grade in T) {
      const g = T[grade];
      const key = depStatus === "with" ? "with" : "without";
      if (g && g[key]) {
        if (city && g[key][city] != null) return Number(g[key][city]) || 0;
        const vals = Object.values(g[key] as Record<string, unknown>);
        const firstNum = vals.find(v => typeof v === "number");
        if (firstNum != null) return Number(firstNum) || 0;
      }
    }
  } catch (_e) {}
  return 0;
}

import React, { useEffect, useMemo, useState } from "react";
import dynamic from "next/dynamic";
import FieldHint from "@/components/FieldHint";
import { calcPay } from "@/lib/calc";
import { toYosBand } from "@/utils/basePayTable";

// Client-only BAHPicker (no SSR) — written without arrow functions.
const BAHPicker = dynamic(function () {
  return import("@/components/BAHPicker");
}, { ssr: false });

type DepStatus = "with" | "without";
type BasType = "enlisted" | "officer";

function fmt(n: number): string {
  if (!Number.isFinite(n)) n = 0;
  // fixed locale to avoid SSR/CSR differences
  return n.toLocaleString("en-US", { style: "currency", currency: "USD", maximumFractionDigits: 2 });
}

export default function PayPage() {
  // ---- State (all hooks declared unconditionally; no early returns) ----
  const [bahState, setBahState] = useState({ bahOn: true, depStatus: "with", mode: "custom", city: "", bahCustom: 0 });
const [grade, setGrade] = useState<string>("E6");
  const [yos, setYos] = useState<number>(6);

  const [bahOn, setBahOn] = useState<boolean>(true);
  const [depStatus, setDepStatus] = useState<DepStatus>("without");
  const [bahMonthly, setBahMonthly] = useState<number>(0);

  const [basOn, setBasOn] = useState<boolean>(true);
  const [basType, setBasType] = useState<BasType>("enlisted");

  const [tspTraditionalPct, setTspTraditionalPct] = useState<number>(0);
  const [tspRothPct, setTspRothPct] = useState<number>(0);

  const [federalMonthly, setFederalMonthly] = useState<number>(0);
  const [stateMonthly, setStateMonthly] = useState<number>(0);

  const [sgliCoverage, setSgliCoverage] = useState<number>(0); // 0–500k in 50k steps
  const [afrhtOn, setAfrh] = useState<boolean>(false);

  const [allot1, setAllot1] = useState<number>(0);
  const [allot2, setAllot2] = useState<number>(0);
  const [allot3, setAllot3] = useState<number>(0);

  // (Optional) effect just to persist/restore later if you want localStorage; safe to keep empty now
  useEffect(function () {}, []);

  function pct(v: number): number {
    if (!Number.isFinite(v)) return 0;
    if (v < 0) return 0;
    if (v > 100) return 100;
    return v;
  }

  // ---- Calculation ---------------------------------------------------
  const result = useMemo(function () {
    const inputs = {
      grade: grade as any,
      yos: yos,
      bahMonthly: bahOn ? bahMonthly : 0,
      basType: basOn ? basType : ("none" as any),
      tspTraditionalPct: pct(tspTraditionalPct),
      tspRothPct: pct(tspRothPct),
      sgliCoverage: sgliCoverage,
      afrhtOn: afrhtOn,
      federalMonthly: federalMonthly,
      stateMonthly: stateMonthly,
      allotments: [allot1, allot2, allot3].filter(function (x) { return Number.isFinite(x) && x > 0; }),
    };
    return calcPay(inputs);
  }, [
    grade, yos,
    bahOn, bahMonthly, depStatus,
    basOn, basType,
    tspTraditionalPct, tspRothPct,
    sgliCoverage, afrhtOn,
    federalMonthly, stateMonthly,
    allot1, allot2, allot3,
  ]);

  const gross = result.grossMonthly;
  const deductions = result.totalDeductionsMonthly;
  const netExclAllots = result.netMonthlyExclAllotments;
  const allots = result.allotmentsMonthly;
  const semi = (netExclAllots - allots) / 2;

  // ---- UI ------------------------------------------------------------
  return (
    <main className="max-w-5xl mx-auto p-6 space-y-8">
      <h1 className="text-2xl font-semibold">Pay setup</h1>

      <section className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Left column – inputs */}
        <div className="space-y-6">
          {/* Paygrade + YOS */}
          <div className="p-4 rounded-lg border">
            <h2 className="font-medium mb-3">Paygrade &amp; Time in Service</h2>

            <label className="block text-sm mb-1">Paygrade</label>
            <select
              className="w-full border rounded p-2"
              value={grade}
              onChange={function (e) { setGrade(e.target.value); }}
            >
              {["E1","E2","E3","E4","E5","E6","E7","E8","E9","W1","W2","W3","W4","W5","O1","O2","O3","O4","O5","O6"].map(function (g) {
                return <option key={g} value={g}>{g}</option>;
              })}
            </select>

            <label className="block text-sm mt-4 mb-1">Time in Service (Years)</label>
            <input
              type="range"
              min={0}
              max={30}
              step={1}
              value={yos}
              onChange={function (e) { setYos(parseInt(e.target.value || "0", 10)); }}
              className="w-full"
            />
            <div className="text-sm mt-1">
              <b>{yos}</b> years (DFAS band {toYosBand(yos)})
            </div>
            <FieldHint text="Base pay is looked up from the approved 2025 table by paygrade and DFAS YOS band." />
          </div>

          {/* BAH */}
          <div className="p-4 rounded-lg border">
            <h2 className="font-medium mb-3">BAH</h2>

            <label className="inline-flex items-center gap-2 mr-4">
              <input
                type="checkbox"
                checked={bahOn}
                onChange={function (e) { setBahOn(e.target.checked); }}
              />
              Include BAH
            </label>

            <label className="inline-flex items-center gap-2">
              <input
                type="radio"
                name="dep"
                checked={depStatus === "without"}
                onChange={function () { setDepStatus("without"); }}
              />
              Without dependents
            </label>

            <label className="inline-flex items-center gap-2 ml-4">
              <input
                type="radio"
                name="dep"
                checked={depStatus === "with"}
                onChange={function () { setDepStatus("with"); }}
              />
              With dependents
            </label>

            <div className="mt-3">
              <BAHPicker
                grade={grade}
                depStatus={depStatus}
                bahOn={bahOn}
                value={bahMonthly}
                onChange={(next) => setBahState(prev => ({ ...prev, ...next }))}}
              />
              <div className="text-sm mt-2">Selected BAH: <b>{fmt(bahOn ? bahMonthly : 0)}</b></div>
            </div>
            <FieldHint text="BAH is non‑taxable. In v1, we keep 10 localities and a custom amount option." />
          </div>

          {/* BAS */}
          <div className="p-4 rounded-lg border">
            <h2 className="font-medium mb-3">BAS</h2>

            <label className="inline-flex items-center gap-2 mr-4">
              <input
                type="checkbox"
                checked={basOn}
                onChange={function (e) { setBasOn(e.target.checked); }}
              />
              Include BAS
            </label>

            <div className="mt-2">
              <label className="inline-flex items-center gap-2 mr-4">
                <input
                  type="radio"
                  name="basType"
                  checked={basType === "enlisted"}
                  onChange={function () { setBasType("enlisted"); }}
                />
                Enlisted
              </label>
              <label className="inline-flex items-center gap-2">
                <input
                  type="radio"
                  name="basType"
                  checked={basType === "officer"}
                  onChange={function () { setBasType("officer"); }}
                />
                Officer
              </label>
            </div>
            <FieldHint>BAS is non‑taxable. We use fixed 2025 rates from <code>utils/bas.ts</code>.</FieldHint>
          </div>

          {/* TSP */}
          <div className="p-4 rounded-lg border">
            <h2 className="font-medium mb-3">TSP</h2>

            <label className="block text-sm mb-1">Traditional %</label>
            <input
              type="number"
              min={0}
              max={100}
              step={0.5}
              className="w-full border rounded p-2"
              value={tspTraditionalPct}
              onChange={function (e) { setTspTraditionalPct(Number(e.target.value) || 0); }}
            />

            <label className="block text-sm mt-3 mb-1">Roth %</label>
            <input
              type="number"
              min={0}
              max={100}
              step={0.5}
              className="w-full border rounded p-2"
              value={tspRothPct}
              onChange={function (e) { setTspRothPct(Number(e.target.value) || 0); }}
            />
            <FieldHint text="Traditional lowers taxable wages; Roth is post‑tax." />
          </div>

          {/* Taxes */}
          <div className="p-4 rounded-lg border">
            <h2 className="font-medium mb-3">Taxes (manual in v1)</h2>

            <label className="block text-sm mb-1">Federal withholding (monthly)</label>
            <input
              type="number"
              min={0}
              step={1}
              className="w-full border rounded p-2"
              value={federalMonthly}
              onChange={function (e) { setFederalMonthly(Number(e.target.value) || 0); }}
            />

            <label className="block text-sm mt-3 mb-1">State tax (monthly)</label>
            <input
              type="number"
              min={0}
              step={1}
              className="w-full border rounded p-2"
              value={stateMonthly}
              onChange={function (e) { setStateMonthly(Number(e.target.value) || 0); }}
            />
            <FieldHint text="We’ll add auto‑federal later; state stays manual for v1." />
          </div>

          {/* Insurance & Allotments */}
          <div className="p-4 rounded-lg border">
            <h2 className="font-medium mb-3">Insurance &amp; Allotments</h2>

            <label className="block text-sm mb-1">SGLI coverage ($0–$500k in $50k steps)</label>
            <input
              type="range"
              min={0}
              max={500000}
              step={50000}
              value={sgliCoverage}
              onChange={function (e) { setSgliCoverage(Number(e.target.value) || 0); }}
              className="w-full"
            />
            <div className="text-sm mt-1">Selected: <b>{sgliCoverage.toLocaleString("en-US")}</b></div>

            <label className="inline-flex items-center gap-2 mt-3">
              <input
                type="checkbox"
                checked={afrhtOn}
                onChange={function (e) { setAfrh(e.target.checked); }}
              />
              AFRH ($0.50)
            </label>

            <div className="grid grid-cols-3 gap-2 mt-3">
              <input
                type="number"
                min={0}
                step={1}
                className="w-full border rounded p-2"
                placeholder="Allotment 1"
                value={allot1}
                onChange={function (e) { setAllot1(Number(e.target.value) || 0); }}
              />
              <input
                type="number"
                min={0}
                step={1}
                className="w-full border rounded p-2"
                placeholder="Allotment 2"
                value={allot2}
                onChange={function (e) { setAllot2(Number(e.target.value) || 0); }}
              />
              <input
                type="number"
                min={0}
                step={1}
                className="w-full border rounded p-2"
                placeholder="Allotment 3"
                value={allot3}
                onChange={function (e) { setAllot3(Number(e.target.value) || 0); }}
              />
            </div>
            <FieldHint text="Allotments are subtracted after net to estimate a paycheck." />
          </div>
        </div>

        {/* Right column – summary */}
        <div className="space-y-6">
          <div className="p-4 rounded-lg border">
            <h2 className="font-medium mb-3">Summary</h2>

            <div className="flex justify-between py-1">
              <span>Gross (monthly)</span>
              <b>{fmt(gross)}</b>
            </div>

            <div className="flex justify-between py-1">
              <span>Deductions (monthly)</span>
              <b>{fmt(deductions)}</b>
            </div>

            <div className="flex justify-between py-1">
              <span>Net (monthly, excl. allotments)</span>
              <b>{fmt(netExclAllots)}</b>
            </div>

            <div className="flex justify-between py-1">
              <span>Allotments total (monthly)</span>
              <b>{fmt(allots)}</b>
            </div>

            <hr className="my-2" />

            <div className="flex justify-between py-1">
              <span>Estimated paycheck (semi‑monthly)</span>
              <b>{fmt(semi)}</b>
            </div>

            <div className="mt-3 text-sm text-muted-foreground">
              <div><b>Taxable wages</b> = Base pay − TSP Traditional amount.</div>
              <div>BAH/BAS are non‑taxable. Roth TSP is post‑tax.</div>
            </div>
          </div>
        </div>
      </section>
    </main>
  );
}
